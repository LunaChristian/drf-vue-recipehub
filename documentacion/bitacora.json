{
  "clases": [
    {
      "numero": 1,
      "tema": "Introducción al curso y presentación del proyecto Receta",
      "archivo_dialogo": "documentacion/clase_01/dialogo.txt",
      "archivo_notas": "documentacion/clase_01/notas.json"
    },
    {
      "numero": 2,
      "tema": "Definición de dependencias y compatibilidad de librerías",
      "archivo_dialogo": "documentacion/clase_02/dialogo.txt",
      "archivo_notas": "documentacion/clase_02/notas.json",
      "archivo_requirements": "requirements.txt"
    },
    {
      "numero": 3,
      "tema": "Uso de clientes para probar APIs REST",
      "archivo_dialogo": "documentacion/clase_03/dialogo.txt",
      "archivo_notas": "documentacion/clase_03/notas.json"
    },
    {
      "numero": 4,
      "tema": "Uso de Insomnia como cliente alternativo para APIs",
      "archivo_dialogo": "documentacion/clase_04/dialogo.txt",
      "archivo_notas": "documentacion/clase_04/notas.json"
    },
    {
      "numero": 5,
      "tema": "Introducción teórica a Django y Vue.js",
      "archivo_dialogo": "documentacion/clase_05/dialogo.txt",
      "archivo_notas": "documentacion/clase_05/notas.json"
    },
    {
      "numero": 6,
      "tema": "Creación y uso de entornos virtuales en Python",
      "archivo_dialogo": "documentacion/clase_06/dialogo.txt",
      "archivo_notas": "documentacion/clase_06/notas.json"
    },
    {
      "numero": 7,
      "tema": "Instalación de Django en el entorno virtual",
      "archivo_dialogo": "documentacion/clase_07/dialogo.txt",
      "archivo_notas": "documentacion/clase_07/notas.json"
    },
    {
      "numero": 8,
      "tema": "Creación del proyecto inicial en Django",
      "archivo_dialogo": "documentacion/clase_08/dialogo.txt",
      "archivo_notas": "documentacion/clase_08/notas.json"
    },
    {
      "numero": 9,
      "tema": "Estructura del proyecto Django y repaso de archivos clave",
      "archivo_dialogo": "documentacion/clase_09/dialogo.txt",
      "archivo_notas": "documentacion/clase_09/notas.json"
    },
    {
      "numero": 10,
      "tema": "Ejecución del servidor de desarrollo y ALLOWED_HOSTS",
      "archivo_dialogo": "documentacion/clase_10/dialogo.txt",
      "archivo_notas": "documentacion/clase_10/notas.json"
    },
    {
      "numero": 11,
      "tema": "Creación de la primera aplicación (app Home)",
      "archivo_dialogo": "documentacion/clase_11/dialogo.txt",
      "archivo_notas": "documentacion/clase_11/notas.json"
    },
    {
      "numero": 12,
      "tema": "Creación de la primera ruta en la aplicación Home",
      "archivo_dialogo": "documentacion/clase_12/dialogo.txt",
      "archivo_notas": "documentacion/clase_12/notas.json"
    },
    {
      "numero": 13,
      "tema": "Uso de HttpResponse en la aplicación Home",
      "archivo_dialogo": "documentacion/clase_13/dialogo.txt",
      "archivo_notas": "documentacion/clase_13/notas.json"
    },
    {
      "numero": 14,
      "tema": "Instalación de Django REST Framework",
      "archivo_dialogo": "documentacion/clase_14/dialogo.txt",
      "archivo_notas": "documentacion/clase_14/notas.json"
    },
    {
      "numero": 15,
      "tema": "Creación de la aplicación 'ejemplo'",
      "archivo_dialogo": "documentacion/clase_15/dialogo.txt",
      "archivo_notas": "documentacion/clase_15/notas.json"
    },
    {
      "numero": 16,
      "tema": "Configuración de rutas con Django REST Framework",
      "archivo_dialogo": "documentacion/clase_16/dialogo.txt",
      "archivo_notas": "documentacion/clase_16/notas.json"
    },
    {
      "numero": 17,
      "tema": "Implementación de múltiples métodos HTTP en APIView",
      "archivo_dialogo": "documentacion/clase_17/dialogo.txt",
      "archivo_notas": "documentacion/clase_17/notas.json"
    },
    {
      "numero": 18,
      "tema": "Manejo de parámetros en rutas y separación de clases para APIView",
      "archivo_dialogo": "documentacion/clase_18/dialogo.txt",
      "archivo_notas": "documentacion/clase_18/notas.json"
    },
    {
      "numero": 19,
      "tema": "Uso de parámetros en query string",
      "archivo_dialogo": "documentacion/clase_19/dialogo.txt",
      "archivo_notas": "documentacion/clase_19/notas.json"
    },
    {
      "numero": 20,
      "tema": "Retornar respuestas en formato JSON",
      "archivo_dialogo": "documentacion/clase_20/dialogo.txt",
      "archivo_notas": "documentacion/clase_20/notas.json"
    },
    {
      "numero": 21,
      "tema": "Recepción de JSON en métodos POST",
      "archivo_dialogo": "documentacion/clase_21/dialogo.txt",
      "archivo_notas": "documentacion/clase_21/notas.json"
    },
    {
      "numero": 22,
      "tema": "Estados HTTP personalizados en JsonResponse",
      "archivo_dialogo": "documentacion/clase_22/dialogo.txt",
      "archivo_notas": "documentacion/clase_22/notas.json"
    },
    {
      "numero": 23,
      "tema": "Configuración de archivos estáticos y media en Django",
      "archivo_dialogo": "documentacion/clase_23/dialogo.txt",
      "archivo_notas": "documentacion/clase_23/notas.json"
    },
    {
      "numero": 24,
      "tema": "Creación de API para subir archivos al servidor",
      "archivo_dialogo": "documentacion/clase_24/dialogo.txt",
      "archivo_notas": "documentacion/clase_24/notas.json"
    },
    {
      "numero": 25,
      "tema": "Configuración para servir archivos subidos desde el navegador",
      "archivo_dialogo": "documentacion/clase_25/dialogo.txt",
      "archivo_notas": "documentacion/clase_25/notas.json"
    },
    {
      "numero": 26,
      "tema": "Definición de objetivos del proyecto Recetario",
      "archivo_dialogo": "documentacion/clase_26/dialogo.txt",
      "archivo_notas": "documentacion/clase_26/notas.json"
    },
    {
      "numero": 27,
      "tema": "Se preparó el entorno para trabajar con MySQL/MariaDB en Django. Se explicó cómo instalar mysqlclient en Windows (XAMPP/WAMP) y en Linux (usando apt para dependencias del sistema y luego pip install mysqlclient). Se aclaró que la librería se instala en el entorno virtual pero el proyecto aún no la utiliza. Próximamente se configurará la base de datos en settings.py."
    },
    {
      "numero": 28,
      "tema": "Uso de requirements.txt para gestionar y compartir dependencias",
      "archivo_dialogo": "documentacion/clase_28/dialogo.txt",
      "archivo_notas": "documentacion/clase_28/notas.json"
    },
    {
      "numero": 29,
      "tema": "Configuración de base de datos MySQL en Django",
      "archivo_dialogo": "documentacion/clase_29/dialogo.txt",
      "archivo_notas": "documentacion/clase_29/notas.json"
    },
    {
      "numero": 30,
      "tema": "Uso de variables de entorno con dotenv en Django",
      "archivo_dialogo": "documentacion/clase_30/dialogo.txt",
      "archivo_notas": "documentacion/clase_30/notas.json"
    },
    {
      "numero": 31,
      "tema": "Configuración dinámica de DEBUG con dotenv",
      "archivo_dialogo": "documentacion/clase_31/dialogo.txt",
      "archivo_notas": "documentacion/clase_31/notas.json"
    },
    {
      "numero": 32,
      "tema": "Creación de la aplicación Categorías y configuración inicial de rutas y vistas",
      "archivo_dialogo": "documentacion/clase_32/dialogo.txt",
      "archivo_notas": "documentacion/clase_32/notas.json"
    },
    {
      "numero": 33,
      "tema": "Modelo de categorías con AutoSlug y registro de la app",
      "archivo_dialogo": "documentacion/clase_33/dialogo.txt",
      "archivo_notas": "documentacion/clase_33/notas.json"
    },
    {
      "numero": 34,
      "tema": "Migraciones en Django (makemigrations y migrate)",
      "archivo_dialogo": "documentacion/clase_34/dialogo.txt",
      "archivo_notas": "documentacion/clase_34/notas.json"
    },
    {
      "numero": 35,
      "tema": "Listar registros desde un modelo utilizando el ORM de Django",
      "archivo_dialogo": "documentacion/clase_35/dialogo.txt",
      "archivo_notas": "documentacion/clase_35/notas.json"
    },
    {
      "numero": 36,
      "tema": "Serialización de modelos con Django REST Framework",
      "archivo_dialogo": "documentacion/clase_36/dialogo.txt",
      "archivo_notas": "documentacion/clase_36/notas.json"
    },
    {
      "numero": 37,
      "tema": "GET /categorias/<id> con manejo de DoesNotExist → Http404",
      "archivo_dialogo": "documentacion/clase_37/dialogo.txt",
      "archivo_notas": "documentacion/clase_37/notas.json"
    },
    {
      "numero": 38,
      "tema": "Creación de categorías mediante método POST en Django REST Framework",
      "archivo_dialogo": "documentacion/clase_38/dialogo.txt",
      "archivo_notas": "documentacion/clase_38/notas.json"
    },
    {
      "numero": 39,
      "tema": "Validación del campo 'nombre' en POST de categorías con respuesta HTTP 400",
      "archivo_dialogo": "documentacion/clase_39/dialogo.txt",
      "archivo_notas": "documentacion/clase_39/notas.json"
    },
    {
      "numero": 40,
      "tema": "Implementación del método PUT para editar categorías con regeneración de slug",
      "archivo_dialogo": "documentacion/clase_40/dialogo.txt",
      "archivo_notas": "documentacion/clase_40/notas.json"
    },
    {
      "numero": 41,
      "tema": "Implementación del método DELETE en /api/v1/categorias/<id>/ y cierre del CRUD completo",
      "archivo_dialogo": "documentacion/clase_41/dialogo.txt",
      "archivo_notas": "documentacion/clase_41/notas.json"
    },
    {
      "numero": 42,
      "tema": "Creación de la app 'recetas' y configuración base de URLs y vistas",
      "archivo_dialogo": "documentacion/clase_42/dialogo.txt",
      "archivo_notas": "documentacion/clase_42/notas.json"
    },
    {
      "numero": 43,
      "tema": "Creación del modelo Receta y relación ForeignKey con Categoría. Migraciones y registro en settings.py",
      "archivo_dialogo": "documentacion/clase_43/dialogo.txt",
      "archivo_notas": "documentacion/clase_43/notas.json"
    },
    {
      "numero": 44,
      "tema": "Creación del serializer RecetaSerializer para el modelo Receta",
      "archivo_dialogo": "documentacion/clase_44/dialogo.txt",
      "archivo_notas": "documentacion/clase_44/notas.json"
    },
    {
      "numero": 45,
      "tema": "Implementación del listado de recetas con APIView y RecetaSerializer",
      "archivo_dialogo": "documentacion/clase_45/dialogo.txt",
      "archivo_notas": "documentacion/clase_45/notas.json"
    },
    {
      "numero": 46,
      "tema": "Serializer personalizado: nombre de categoría y fecha formateada",
      "archivo_dialogo": "documentacion/clase_46/dialogo.txt",
      "archivo_notas": "documentacion/clase_46/notas.json"
    },
    {
      "numero": 47,
      "tema": "SerializerMethodField para construir URL absoluta de imagen (BASE_URL desde .env)",
      "archivo_dialogo": "documentacion/clase_47/dialogo.txt",
      "archivo_notas": "documentacion/clase_47/notas.json"
    },
    {
      "numero": 48,
      "tema": "Implementación del método GET por ID (detalle individual de receta)",
      "archivo_dialogo": "documentacion/clase_48/dialogo.txt",
      "archivo_notas": "documentacion/clase_48/notas.json"
    },
    {
      "numero": 49,
      "tema": "Creación del método POST para registrar recetas (inicio de carga con FormData)",
      "archivo_dialogo": "documentacion/clase_49/dialogo.txt",
      "archivo_notas": "documentacion/clase_49/notas.json"
    },
    {
      "numero": 50,
      "tema": "Validaciones en POST de recetas (campos requeridos y HTTP 400)",
      "archivo_dialogo": "documentacion/clase_50/dialogo.txt",
      "archivo_notas": "documentacion/clase_50/notas.json"
    },
    {
      "numero": 51,
      "tema": "Validación de unicidad de receta por nombre en POST (exists())",
      "archivo_dialogo": "documentacion/clase_51/dialogo.txt",
      "archivo_notas": "documentacion/clase_51/notas.json"
    },
    {
      "numero": 52,
      "tema": "Validación de existencia de categoría en POST (Categoria.DoesNotExist)",
      "archivo_dialogo": "documentacion/clase_52/dialogo.txt",
      "archivo_notas": "documentacion/clase_52/notas.json"
    },
    {
      "numero": 53,
      "tema": "Subida de imagen en POST de recetas con FileSystemStorage",
      "archivo_dialogo": "documentacion/clase_53/dialogo.txt",
      "archivo_notas": "documentacion/clase_53/notas.json"
    },
    {
      "numero": 54,
      "tema": "Validación de tipo MIME (image/jpeg, image/png) antes de subir imagen",
      "archivo_dialogo": "documentacion/clase_54/dialogo.txt",
      "archivo_notas": "documentacion/clase_54/notas.json"
    },
    {
      "numero": 55,
      "tema": "PUT de Receta: actualización con validación de campos (titulo_receta, tiempo, descripcion, categoria_id) y verificación de categoría",
      "archivo_dialogo": "documentacion/clase_55/dialogo.txt",
      "archivo_notas": "documentacion/clase_55/notas.json"
    },
    {
      "numero": 56,
      "tema": "Método DELETE de Receta: eliminación de registro y archivo físico (os.remove con MEDIA_ROOT)",
      "archivo_dialogo": "documentacion/clase_56/dialogo.txt",
      "archivo_notas": "documentacion/clase_56/notas.json"
    },
    {
      "numero": 57,
      "tema": "Validación en DELETE de Categorías: bloquear eliminación si hay recetas asociadas",
      "archivo_dialogo": "documentacion/clase_57/dialogo.txt",
      "archivo_notas": "documentacion/clase_57/notas.json"
    },
    {
  "numero": "58-65",
  "tema": "Módulo de Contacto (formulario, base de datos y envío de correo)",
  "tareas_realizadas": [
    "Creación de app 'contacto' con Django",
    "Configuración de URL y clase APIView con método POST",
    "Validaciones básicas de campos obligatorios",
    "Definición del modelo Contacto con campos nombre, correo, teléfono, mensaje y fecha",
    "Migraciones ejecutadas correctamente",
    "Implementación de try/except para manejo de errores",
    "Creación del módulo reutilizable 'utilidades'",
    "Configuración de variables de entorno SMTP para Mailtrap",
    "Desarrollo de la función sendmail para envío HTML vía SMTP",
    "Integración del envío de correo tras el guardado del contacto"
  ],
  "problemas_detectados": [
    "Falla inicial en el envío por credenciales SMTP no cargadas (solución: reiniciar servidor tras modificar .env)",
    "Advertencia de timezone en el guardado de fecha (no afecta el funcionamiento)"
  ],
  "comandos_usados": [
    "python manage.py startapp contacto",
    "python manage.py makemigrations",
    "python manage.py migrate",
    "python manage.py runserver"
  ],
  "resultados": "El módulo de contacto funciona correctamente: valida, guarda los datos y envía correo de prueba usando Mailtrap.",
  "proximos_pasos": [
    "Implementar autenticación con tokens JWT (siguiente bloque del curso)",
    "Probar el endpoint desde el frontend",
    "Optimizar el formato del correo (HTML completo o plantilla dedicada)"
  ]
},

    {
      "numero": 66,
      "tema": "Inicio del módulo de seguridad y configuración de la app 'seguridad'",
      "archivo_dialogo": "documentacion/clase_66/dialogo.txt",
      "archivo_notas": "documentacion/clase_66/notas.json",
      "resumen_corto": "Se crea la app 'seguridad' y se prepara una ruta de registro base. Se define el enfoque de seguridad selectiva: endpoints públicos vs. privados.",
      "commit_msgs": [
        "feat(seguridad): crear app y ruta base de registro",
        "chore(urls): incluir rutas de seguridad en backend/urls.py",
        "docs: agregar notas de clase 66 (módulo de seguridad)"
      ]
    },
    {
      "numero": 67,
      "tema": "Modelo de usuarios y autenticación base en Django",
      "archivo_dialogo": "documentacion/clase_67/dialogo.txt",
      "archivo_notas": "documentacion/clase_67/notas.json",
      "resumen_corto": "Se estudia el modelo auth_user, sus campos, la diferencia entre hash y encriptación, y la creación de superusuarios.",
      "commit_msgs": [
        "docs(clase_67): notas sobre modelo de usuarios y autenticación base en Django",
        "docs(bitacora): actualización con resumen de clase 67"
      ]
    },
    {
      "numero": 68,
      "tema": "Extensión del modelo User mediante UserMetadata",
      "archivo_dialogo": "documentacion/clase_68/dialogo.txt",
      "archivo_notas": "documentacion/clase_68/notas.json",
      "resumen_corto": "Se crea el modelo UserMetadata vinculado al modelo User. Se agrega un campo token y se ejecutan las migraciones.",
      "commit_msgs": [
        "feat(seguridad): crear modelo UserMetadata y relación con User",
        "docs(clase_68): agregar notas de la clase sobre extensión del modelo User",
        "docs(bitacora): actualización con resumen de clase 68"
      ]
    },
    {
      "numero": 69,
      "tema": "Registro de usuario: validaciones básicas (nombre, correo, password) en /seguridad/registro",
      "archivo_dialogo": "documentacion/clase_69/dialogo.txt",
      "archivo_notas": "documentacion/clase_69/notas.json",
      "resumen_corto": "Se define el endpoint de registro y se agregan validaciones de campos requeridos con respuestas HTTP 400.",
      "commit_msgs": [
        "docs(clase_69): registro de usuario — validaciones básicas (nombre, correo, password)"
      ]
    },
    {
  "numero": 70,
  "tema": "Validación de duplicidad de correo en registro de usuario",
  "archivo_dialogo": "documentacion/clase_70/dialogo.txt",
  "archivo_notas": "documentacion/clase_70/notas.json",
  "resumen_corto": "Se agrega verificación para evitar registros con correos existentes en auth_user. Retorna error HTTP 400 si el correo ya está registrado.",
  "commit_msgs": [
    "feat(seguridad): validación de duplicidad de correo en registro de usuario",
    "docs(clase_70): notas sobre verificación de correo existente"
  ]
},
{
  "numero": 71,
  "tema": "Generación de token de activación con UUID y construcción de URL de verificación",
  "archivo_dialogo": "documentacion/clase_71/dialogo.txt",
  "archivo_notas": "documentacion/clase_71/notas.json",
  "resumen_corto": "Se genera un token único con UUID4 para validar la activación de cuentas y se construye la URL de verificación con BASE_URL del .env.",
  "commit_msgs": [
    "feat(seguridad): generación de token UUID para verificación de usuario",
    "docs(clase_71): notas sobre flujo de activación de cuenta con token"
  ]
},{
  "numero": 72,
  "tema": "Registro de usuario con inserción en cascada en User y UserMetadata",
  "archivo_dialogo": "documentacion/clase_72/dialogo.txt",
  "archivo_notas": "documentacion/clase_72/notas.json",
  "resumen_corto": "Se implementa el registro funcional de usuarios. Se usa create_user() para manejar hash de contraseña y se inserta registro en UserMetadata con token mediante inserción en cascada.",
  "commit_msgs": [
    "feat(seguridad): implementar registro real de usuario con inserción en cascada (User y UserMetadata)",
    "docs(clase_72): notas sobre registro funcional y create_user()"
  ]
},
{
  "clase": 73,
  "tema": "Envío de correo de verificación de cuenta",
  "tareas_realizadas": [
    "Reutilización de la función sendmail del módulo utilidades",
    "Generación dinámica de correo HTML con enlace de verificación",
    "Importación del módulo utilidades en la vista de registro",
    "Prueba exitosa de envío de correo con URL de activación"
  ],
  "problemas_detectados": [],
  "comandos_usados": [
    "python manage.py runserver"
  ],
  "resultados": "El sistema envía correctamente un correo de verificación al usuario con la URL y token correspondientes.",
  "proximos_pasos": [
    "Implementar la vista que procese el enlace de verificación",
    "Registrar la activación del usuario en base de datos",
    "Agregar una plantilla HTML más profesional al correo"
  ]
},
{
  "clase": 74,
  "tema": "Verificación de cuenta por token y redirección",
  "tareas_realizadas": [
    "Definición de ruta GET con parámetro <str:token> para verificación.",
    "Implementación de ClaseDos(APIView.get) con validaciones de token.",
    "Manejo de errores con 404 cuando token falta o no existe.",
    "Update en cascada: limpiar token en UserMetadata y activar usuario en User.",
    "Redirección a FRONTEND_URL/login mediante HttpResponseRedirect.",
    "Carga de variables de entorno con load_dotenv."
  ],
  "problemas_detectados": [
    "Página en blanco por no tomar FRONTEND_URL tras cambio en .env (solución: reiniciar servidor)."
  ],
  "comandos_usados": [
    "python manage.py runserver",
    "curl -i http://localhost:8000/api/v1/seguridad/verificacion/TOKEN_DE_EJEMPLO/"
  ],
  "archivos_afectados": [
    "seguridad/urls.py",
    "seguridad/views.py"
  ],
  "resultados": "La visita al enlace de verificación limpia el token, activa al usuario y redirige al login del frontend.",
  "proximos_pasos": [
    "Agregar control de expiración del token y mensajes de estado en el frontend.",
    "Evitar reuso del token validando que ya esté vacío.",
    "Tests automatizados para el flujo de activación."
  ]
},
{
  "clase": 75,
  "tema": "Validación de usuario inactivo al verificar token",
  "tareas_realizadas": [
    "Modificación de la query del endpoint GET de verificación.",
    "Incorporación del filtro cruzado 'user__is_active=0'.",
    "Prueba con nuevo registro de usuario inactivo (Juanito Pérez 5).",
    "Confirmación del flujo: token válido → activación → redirección exitosa."
  ],
  "problemas_detectados": [],
  "comandos_usados": [
    "python manage.py runserver"
  ],
  "archivos_afectados": [
    "seguridad/views.py"
  ],
  "resultados": "El endpoint solo permite activar cuentas inactivas. Tokens de usuarios ya activos devuelven 404 con mensaje 'Recurso no disponible o usuario ya activo'.",
  "proximos_pasos": [
    "Registrar logs de intentos de activación fallidos.",
    "Agregar control de expiración de tokens por tiempo.",
    "Mostrar mensajes personalizados en el frontend según el código de error."
  ]
},
{
  "clase": 76,
  "tema": "Creación del endpoint de login con authenticate()",
  "tareas_realizadas": [
    "Creación de nueva ruta POST /api/v1/seguridad/login/",
    "Definición de la clase ClaseTres(APIView) en seguridad/views.py.",
    "Validación de los campos correo y password.",
    "Búsqueda del usuario por correo en la base de datos.",
    "Uso de la función authenticate() para validar credenciales.",
    "Confirmación de que authenticate() considera is_active = 1.",
    "Pruebas de login con usuario activo e inactivo."
  ],
  "problemas_detectados": [
    "Prueba inicial sin retorno JSON (resuelta con respuesta temporal).",
    "Usuarios inactivos devuelven error de credenciales (comportamiento esperado)."
  ],
  "comandos_usados": [
    "python manage.py runserver"
  ],
  "archivos_afectados": [
    "seguridad/urls.py",
    "seguridad/views.py"
  ],
  "resultados": "El endpoint de login valida correctamente las credenciales y el estado activo del usuario. Falta integrar la generación del JWT en la siguiente clase.",
  "proximos_pasos": [
    "Incorporar librería JWT (SimpleJWT o PyJWT).",
    "Generar y retornar token tras autenticación exitosa.",
    "Proteger endpoints con autenticación JWT."
  ]
}


  ]
}